(aaa_translation_unit (batch_statements (statements (ddl_statements (create_statement CREATE (create_database DATABASE (keyw_id (keyw_id_part (func_keyw_id SampleDB))))))) (statements GO) (statements (sql_statements (use_statement USE (keyw_id (keyw_id_part (func_keyw_id SampleDB)))))) (statements GO) (statements (ddl_statements (create_statement CREATE (create_xml XML SCHEMA COLLECTION (keyw_id (keyw_id_part (func_keyw_id ManuInstructionsSchemaCollection))) AS N'<?xml version="1.0" encoding="UTF-16"?>\r\n<xsd:schema targetNamespace="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions" \r\n   xmlns          ="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions" \r\n   elementFormDefault="qualified" \r\n   attributeFormDefault="unqualified"\r\n   xmlns:xsd="http://www.w3.org/2001/XMLSchema" >\r\n\r\n    <xsd:complexType name="StepType" mixed="true" >\r\n        <xsd:choice  minOccurs="0" maxOccurs="unbounded" > \r\n            <xsd:element name="tool" type="xsd:string" />\r\n            <xsd:element name="material" type="xsd:string" />\r\n            <xsd:element name="blueprint" type="xsd:string" />\r\n            <xsd:element name="specs" type="xsd:string" />\r\n            <xsd:element name="diag" type="xsd:string" />\r\n        </xsd:choice> \r\n    </xsd:complexType>\r\n\r\n    <xsd:element  name="root">\r\n        <xsd:complexType mixed="true">\r\n            <xsd:sequence>\r\n                <xsd:element name="Location" minOccurs="1" maxOccurs="unbounded">\r\n                    <xsd:complexType mixed="true">\r\n                        <xsd:sequence>\r\n                            <xsd:element name="step" type="StepType" minOccurs="1" maxOccurs="unbounded" />\r\n                        </xsd:sequence>\r\n                        <xsd:attribute name="LocationID" type="xsd:integer" use="required"/>\r\n                        <xsd:attribute name="SetupHours" type="xsd:decimal" use="optional"/>\r\n                        <xsd:attribute name="MachineHours" type="xsd:decimal" use="optional"/>\r\n                        <xsd:attribute name="LaborHours" type="xsd:decimal" use="optional"/>\r\n                        <xsd:attribute name="LotSize" type="xsd:decimal" use="optional"/>\r\n                    </xsd:complexType>\r\n                </xsd:element>\r\n            </xsd:sequence>\r\n        </xsd:complexType>\r\n    </xsd:element>\r\n</xsd:schema>' ;)))) (statements GO) (statements (sql_statements (select_statement (query_expression (query_specification select (select_list (select_element *)) (from_clause from (table_source_list (table_source (tableSourceElement (table_source_primitive (primitive_table (keyw_id (keyw_id_part (func_keyw_id (keywords sys))) . (keyw_id_part (func_keyw_id xml_schema_collections)))))))))))))) (statements (sql_statements (select_statement (query_expression (query_specification select (select_list (select_element (expression (keyw_id_part (func_keyw_id (keywords name)))))) (from_clause from (table_source_list (table_source (tableSourceElement (table_source_primitive (primitive_table (keyw_id (keyw_id_part (func_keyw_id (keywords sys))) . (keyw_id_part (func_keyw_id xml_schema_namespaces)))))))))))))) (statements (sql_statements (miscellaneous_statements (declare_statement DECLARE (declare_list (declare_list_item (keyw_id (keyw_id_part (func_keyw_id @x))) (declare_as opt_as (declare_as_opts (cr_type_data_type (cr_type_data (keyw_id (keyw_id_part (func_keyw_id (keywords xml)))) ( (keyw_id (keyw_id_part (func_keyw_id ManuInstructionsSchemaCollection))) ))))))))))) (statements GO) (statements (ddl_statements (create_statement CREATE (create_table TABLE (keyw_id (keyw_id_part (func_keyw_id T))) ( (ct_col_def_list (ct_col_def_list_element (ct_column_def_plus (ct_column_definition (keyw_id (keyw_id_part (func_keyw_id i))) (ct_data_type (ct_data (keyw_id (keyw_id_part (func_keyw_id int))))))) (ct_constraint_list (ct_col_table_constraint primary key))) , (ct_col_def_list_element (ct_column_def_plus (ct_column_definition (keyw_id (keyw_id_part (func_keyw_id x))) (ct_data_type (ct_data (keyw_id (keyw_id_part (func_keyw_id (keywords xml)))) ( (keyw_id (keyw_id_part (func_keyw_id ManuInstructionsSchemaCollection))) ))))))) ))))) (statements GO) (statements (ddl_statements (drop_statement DROP (dropCommonList (dropListElements TABLE) (keyw_id_list (keyw_id (keyw_id_part (func_keyw_id T)))))))) (statements GO) (statements (ddl_statements (drop_statement DROP (dropCommon (dropElements XML SCHEMA COLLECTION) (keyw_id (keyw_id_part (func_keyw_id ManuInstructionsSchemaCollection))))))) (statements Go) (statements (sql_statements (use_statement USE (keyw_id (keyw_id_part (func_keyw_id (keywords Master))))))) (statements GO (first_exec (exec_sp (exec_sp_func (keyw_id (keyw_id_part (func_keyw_id (keywords DROP)))) (exec_sp_param_list (exec_sp_param (expression (keyw_id_part (func_keyw_id (keywords DATABASE))))))))) (first_exec (exec_sp (exec_sp_func (keyw_id (keyw_id_part (func_keyw_id SampleDB)))))))) <EOF>)
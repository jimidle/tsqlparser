digraph ParseTree {
  n0 -> n1 [label="batch_statements"];
  n1 -> n2 [label="statements"];
  n2 -> n3 [label="ddl_statements"];
  n3 -> n4 [label="create_statement"];
  n4 -> n5 [label="CREATE"];
  n4 -> n6 [label="create_rule"];
  n6 -> n7 [label="RULE"];
  n6 -> n8 [label="keyw_id"];
  n8 -> n9 [label="keyw_id_part"];
  n9 -> n10 [label="func_keyw_id"];
  n10 -> n11 [label="range_rule"];
  n6 -> n12 [label="AS"];
  n6 -> n13 [label="search_condition"];
  n13 -> n14 [label="predicate"];
  n14 -> n15 [label="expression"];
  n15 -> n16 [label="expression"];
  n16 -> n17 [label="expression"];
  n17 -> n18 [label="keyw_id_part"];
  n18 -> n19 [label="func_keyw_id"];
  n19 -> n20 [label="@range"];
  n16 -> n21 [label=">="];
  n16 -> n22 [label="expression"];
  n22 -> n23 [label="money"];
  n23 -> n24 [label="$"];
  n23 -> n25 [label="1000"];
  n15 -> n26 [label="AND"];
  n15 -> n27 [label="expression"];
  n27 -> n28 [label="expression"];
  n28 -> n29 [label="keyw_id_part"];
  n29 -> n30 [label="func_keyw_id"];
  n30 -> n31 [label="@range"];
  n27 -> n32 [label="<"];
  n27 -> n33 [label="expression"];
  n33 -> n34 [label="money"];
  n34 -> n35 [label="$"];
  n34 -> n36 [label="20000"];
  n6 -> n37 [label=";"];
  n0 -> n38 [label="<EOF>"];
}